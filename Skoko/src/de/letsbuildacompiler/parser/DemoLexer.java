// Generated from Demo.g4 by ANTLR 4.6
package de.letsbuildacompiler.parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DemoLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.6", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, SYSTEMFUNC=40, BOOL=41, IDENTIFIER=42, NUMBER=43, FLOAT=44, 
		WHITESPACE=45, STRING=46, COMMENT=47, LINECOMMENT=48;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "SYSTEMFUNC", "BOOL", 
		"IDENTIFIER", "NUMBER", "FLOAT", "WHITESPACE", "STRING", "COMMENT", "LINECOMMENT"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'import:'", "','", "'.'", "';'", "'if'", "'('", "')'", "'else'", 
		"'while'", "'{'", "'}'", "'/'", "'*'", "'-'", "'+'", "'<<'", "'>>'", "'<'", 
		"'<='", "'>'", "'>='", "'=='", "'<>'", "'&&'", "'||'", "'['", "']'", "'='", 
		"'print('", "'out('", "'return'", "'type'", "':'", "'new'", "'[]'", "'int'", 
		"'float'", "'void'", "'string'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "SYSTEMFUNC", "BOOL", "IDENTIFIER", "NUMBER", 
		"FLOAT", "WHITESPACE", "STRING", "COMMENT", "LINECOMMENT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public DemoLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Demo.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62\u0159\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3"+
		"\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16"+
		"\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\24\3\24"+
		"\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31"+
		"\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3"+
		"!\3!\3!\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3\'"+
		"\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3"+
		")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0109"+
		"\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0114\n*\3+\3+\7+\u0118\n+\f+\16+\u011b"+
		"\13+\3,\6,\u011e\n,\r,\16,\u011f\3-\6-\u0123\n-\r-\16-\u0124\3-\3-\6-"+
		"\u0129\n-\r-\16-\u012a\3.\6.\u012e\n.\r.\16.\u012f\3.\3.\3/\3/\7/\u0136"+
		"\n/\f/\16/\u0139\13/\3/\3/\3\60\3\60\3\60\3\60\3\60\7\60\u0142\n\60\f"+
		"\60\16\60\u0145\13\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\7\61"+
		"\u0150\n\61\f\61\16\61\u0153\13\61\3\61\5\61\u0156\n\61\3\61\3\61\5\u0137"+
		"\u0143\u0151\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31"+
		"\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65"+
		"\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62\3\2\7"+
		"\4\2C\\c|\5\2\62;C\\c|\3\2\62;\5\2\13\f\17\17\"\"\3\3\f\f\u0166\2\3\3"+
		"\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2"+
		"\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3"+
		"\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2"+
		"%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61"+
		"\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2"+
		"\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I"+
		"\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2"+
		"\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2"+
		"\3c\3\2\2\2\5k\3\2\2\2\7m\3\2\2\2\to\3\2\2\2\13q\3\2\2\2\rt\3\2\2\2\17"+
		"v\3\2\2\2\21x\3\2\2\2\23}\3\2\2\2\25\u0083\3\2\2\2\27\u0085\3\2\2\2\31"+
		"\u0087\3\2\2\2\33\u0089\3\2\2\2\35\u008b\3\2\2\2\37\u008d\3\2\2\2!\u008f"+
		"\3\2\2\2#\u0092\3\2\2\2%\u0095\3\2\2\2\'\u0097\3\2\2\2)\u009a\3\2\2\2"+
		"+\u009c\3\2\2\2-\u009f\3\2\2\2/\u00a2\3\2\2\2\61\u00a5\3\2\2\2\63\u00a8"+
		"\3\2\2\2\65\u00ab\3\2\2\2\67\u00ad\3\2\2\29\u00af\3\2\2\2;\u00b1\3\2\2"+
		"\2=\u00b8\3\2\2\2?\u00bd\3\2\2\2A\u00c4\3\2\2\2C\u00c9\3\2\2\2E\u00cb"+
		"\3\2\2\2G\u00cf\3\2\2\2I\u00d2\3\2\2\2K\u00d6\3\2\2\2M\u00dc\3\2\2\2O"+
		"\u00e1\3\2\2\2Q\u0108\3\2\2\2S\u0113\3\2\2\2U\u0115\3\2\2\2W\u011d\3\2"+
		"\2\2Y\u0122\3\2\2\2[\u012d\3\2\2\2]\u0133\3\2\2\2_\u013c\3\2\2\2a\u014b"+
		"\3\2\2\2cd\7k\2\2de\7o\2\2ef\7r\2\2fg\7q\2\2gh\7t\2\2hi\7v\2\2ij\7<\2"+
		"\2j\4\3\2\2\2kl\7.\2\2l\6\3\2\2\2mn\7\60\2\2n\b\3\2\2\2op\7=\2\2p\n\3"+
		"\2\2\2qr\7k\2\2rs\7h\2\2s\f\3\2\2\2tu\7*\2\2u\16\3\2\2\2vw\7+\2\2w\20"+
		"\3\2\2\2xy\7g\2\2yz\7n\2\2z{\7u\2\2{|\7g\2\2|\22\3\2\2\2}~\7y\2\2~\177"+
		"\7j\2\2\177\u0080\7k\2\2\u0080\u0081\7n\2\2\u0081\u0082\7g\2\2\u0082\24"+
		"\3\2\2\2\u0083\u0084\7}\2\2\u0084\26\3\2\2\2\u0085\u0086\7\177\2\2\u0086"+
		"\30\3\2\2\2\u0087\u0088\7\61\2\2\u0088\32\3\2\2\2\u0089\u008a\7,\2\2\u008a"+
		"\34\3\2\2\2\u008b\u008c\7/\2\2\u008c\36\3\2\2\2\u008d\u008e\7-\2\2\u008e"+
		" \3\2\2\2\u008f\u0090\7>\2\2\u0090\u0091\7>\2\2\u0091\"\3\2\2\2\u0092"+
		"\u0093\7@\2\2\u0093\u0094\7@\2\2\u0094$\3\2\2\2\u0095\u0096\7>\2\2\u0096"+
		"&\3\2\2\2\u0097\u0098\7>\2\2\u0098\u0099\7?\2\2\u0099(\3\2\2\2\u009a\u009b"+
		"\7@\2\2\u009b*\3\2\2\2\u009c\u009d\7@\2\2\u009d\u009e\7?\2\2\u009e,\3"+
		"\2\2\2\u009f\u00a0\7?\2\2\u00a0\u00a1\7?\2\2\u00a1.\3\2\2\2\u00a2\u00a3"+
		"\7>\2\2\u00a3\u00a4\7@\2\2\u00a4\60\3\2\2\2\u00a5\u00a6\7(\2\2\u00a6\u00a7"+
		"\7(\2\2\u00a7\62\3\2\2\2\u00a8\u00a9\7~\2\2\u00a9\u00aa\7~\2\2\u00aa\64"+
		"\3\2\2\2\u00ab\u00ac\7]\2\2\u00ac\66\3\2\2\2\u00ad\u00ae\7_\2\2\u00ae"+
		"8\3\2\2\2\u00af\u00b0\7?\2\2\u00b0:\3\2\2\2\u00b1\u00b2\7r\2\2\u00b2\u00b3"+
		"\7t\2\2\u00b3\u00b4\7k\2\2\u00b4\u00b5\7p\2\2\u00b5\u00b6\7v\2\2\u00b6"+
		"\u00b7\7*\2\2\u00b7<\3\2\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba\7w\2\2\u00ba"+
		"\u00bb\7v\2\2\u00bb\u00bc\7*\2\2\u00bc>\3\2\2\2\u00bd\u00be\7t\2\2\u00be"+
		"\u00bf\7g\2\2\u00bf\u00c0\7v\2\2\u00c0\u00c1\7w\2\2\u00c1\u00c2\7t\2\2"+
		"\u00c2\u00c3\7p\2\2\u00c3@\3\2\2\2\u00c4\u00c5\7v\2\2\u00c5\u00c6\7{\2"+
		"\2\u00c6\u00c7\7r\2\2\u00c7\u00c8\7g\2\2\u00c8B\3\2\2\2\u00c9\u00ca\7"+
		"<\2\2\u00caD\3\2\2\2\u00cb\u00cc\7p\2\2\u00cc\u00cd\7g\2\2\u00cd\u00ce"+
		"\7y\2\2\u00ceF\3\2\2\2\u00cf\u00d0\7]\2\2\u00d0\u00d1\7_\2\2\u00d1H\3"+
		"\2\2\2\u00d2\u00d3\7k\2\2\u00d3\u00d4\7p\2\2\u00d4\u00d5\7v\2\2\u00d5"+
		"J\3\2\2\2\u00d6\u00d7\7h\2\2\u00d7\u00d8\7n\2\2\u00d8\u00d9\7q\2\2\u00d9"+
		"\u00da\7c\2\2\u00da\u00db\7v\2\2\u00dbL\3\2\2\2\u00dc\u00dd\7x\2\2\u00dd"+
		"\u00de\7q\2\2\u00de\u00df\7k\2\2\u00df\u00e0\7f\2\2\u00e0N\3\2\2\2\u00e1"+
		"\u00e2\7u\2\2\u00e2\u00e3\7v\2\2\u00e3\u00e4\7t\2\2\u00e4\u00e5\7k\2\2"+
		"\u00e5\u00e6\7p\2\2\u00e6\u00e7\7i\2\2\u00e7P\3\2\2\2\u00e8\u00e9\7v\2"+
		"\2\u00e9\u00ea\7q\2\2\u00ea\u00eb\7U\2\2\u00eb\u00ec\7v\2\2\u00ec\u00ed"+
		"\7t\2\2\u00ed\u00ee\7k\2\2\u00ee\u00ef\7p\2\2\u00ef\u0109\7i\2\2\u00f0"+
		"\u00f1\7v\2\2\u00f1\u00f2\7q\2\2\u00f2\u00f3\7K\2\2\u00f3\u00f4\7p\2\2"+
		"\u00f4\u0109\7v\2\2\u00f5\u00f6\7v\2\2\u00f6\u00f7\7q\2\2\u00f7\u00f8"+
		"\7H\2\2\u00f8\u00f9\7n\2\2\u00f9\u00fa\7q\2\2\u00fa\u00fb\7c\2\2\u00fb"+
		"\u0109\7v\2\2\u00fc\u00fd\7c\2\2\u00fd\u00fe\7r\2\2\u00fe\u00ff\7r\2\2"+
		"\u00ff\u0100\7g\2\2\u0100\u0101\7p\2\2\u0101\u0109\7f\2\2\u0102\u0103"+
		"\7n\2\2\u0103\u0104\7g\2\2\u0104\u0105\7p\2\2\u0105\u0106\7i\2\2\u0106"+
		"\u0107\7v\2\2\u0107\u0109\7j\2\2\u0108\u00e8\3\2\2\2\u0108\u00f0\3\2\2"+
		"\2\u0108\u00f5\3\2\2\2\u0108\u00fc\3\2\2\2\u0108\u0102\3\2\2\2\u0109R"+
		"\3\2\2\2\u010a\u010b\7v\2\2\u010b\u010c\7t\2\2\u010c\u010d\7w\2\2\u010d"+
		"\u0114\7g\2\2\u010e\u010f\7h\2\2\u010f\u0110\7c\2\2\u0110\u0111\7n\2\2"+
		"\u0111\u0112\7u\2\2\u0112\u0114\7g\2\2\u0113\u010a\3\2\2\2\u0113\u010e"+
		"\3\2\2\2\u0114T\3\2\2\2\u0115\u0119\t\2\2\2\u0116\u0118\t\3\2\2\u0117"+
		"\u0116\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2"+
		"\2\2\u011aV\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011e\t\4\2\2\u011d\u011c"+
		"\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120"+
		"X\3\2\2\2\u0121\u0123\t\4\2\2\u0122\u0121\3\2\2\2\u0123\u0124\3\2\2\2"+
		"\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0128"+
		"\7\60\2\2\u0127\u0129\t\4\2\2\u0128\u0127\3\2\2\2\u0129\u012a\3\2\2\2"+
		"\u012a\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012bZ\3\2\2\2\u012c\u012e\t"+
		"\5\2\2\u012d\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u012d\3\2\2\2\u012f"+
		"\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\b.\2\2\u0132\\\3\2\2\2"+
		"\u0133\u0137\7$\2\2\u0134\u0136\13\2\2\2\u0135\u0134\3\2\2\2\u0136\u0139"+
		"\3\2\2\2\u0137\u0138\3\2\2\2\u0137\u0135\3\2\2\2\u0138\u013a\3\2\2\2\u0139"+
		"\u0137\3\2\2\2\u013a\u013b\7$\2\2\u013b^\3\2\2\2\u013c\u013d\7\61\2\2"+
		"\u013d\u013e\7,\2\2\u013e\u0143\3\2\2\2\u013f\u0142\5_\60\2\u0140\u0142"+
		"\13\2\2\2\u0141\u013f\3\2\2\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2\2\2"+
		"\u0143\u0144\3\2\2\2\u0143\u0141\3\2\2\2\u0144\u0146\3\2\2\2\u0145\u0143"+
		"\3\2\2\2\u0146\u0147\7,\2\2\u0147\u0148\7\61\2\2\u0148\u0149\3\2\2\2\u0149"+
		"\u014a\b\60\2\2\u014a`\3\2\2\2\u014b\u014c\7\61\2\2\u014c\u014d\7\61\2"+
		"\2\u014d\u0151\3\2\2\2\u014e\u0150\13\2\2\2\u014f\u014e\3\2\2\2\u0150"+
		"\u0153\3\2\2\2\u0151\u0152\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0155\3\2"+
		"\2\2\u0153\u0151\3\2\2\2\u0154\u0156\t\6\2\2\u0155\u0154\3\2\2\2\u0156"+
		"\u0157\3\2\2\2\u0157\u0158\b\61\2\2\u0158b\3\2\2\2\17\2\u0108\u0113\u0119"+
		"\u011f\u0124\u012a\u012f\u0137\u0141\u0143\u0151\u0155\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}