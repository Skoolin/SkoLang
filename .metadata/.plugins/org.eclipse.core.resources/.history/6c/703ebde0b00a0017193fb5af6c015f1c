package de.letsbuildacompiler.compiler;

import org.antlr.v4.runtime.tree.ParseTree;

import de.letsbuildacompiler.exceptions.FunctionAlreadyDefinedException;
import de.letsbuildacompiler.parser.DemoBaseVisitor;
import de.letsbuildacompiler.parser.DemoParser.FunctionDefinitionContext;

public class FunctionDefinitionFinder {
	
	public static FunctionList findFunctions(ParseTree tree) {
		final FunctionList definedFunctions = new FunctionList();
		definedFunctions.add("toString", new DataType[] { DataType.INT }, DataType.STRING);
		definedFunctions.add("toInt", new DataType[] { DataType.STRING }, DataType.INT);
		definedFunctions.add("write", new DataType[] { DataType.INT }, DataType.VOID);
		definedFunctions.add("out", new DataType[] { DataType.INT }, DataType.VOID);
		definedFunctions.add("write", new DataType[] { DataType.STRING }, DataType.VOID);
		definedFunctions.add("out", new DataType[] { DataType.STRING }, DataType.VOID);
		definedFunctions.add("append", new DataType[] { DataType.STRING, DataType.STRING }, DataType.STRING);
		
		new DemoBaseVisitor<Void>() {
			@Override
			public Void visitFunctionDefinition(FunctionDefinitionContext ctx) {
				String functionName = ctx.funcName.getText();
				int parameterCount = ctx.params.declarations.size();
				DataType[] params = new DataType[parameterCount];
				for(int i = 0; i < parameterCount; i++) {
					DataType paramType = DataType.INT;
					switch (ctx.params.declarations.get(i).type.getText()) {
					case "int":
						break;
					case "string":
						paramType = DataType.STRING;
						break;
					default:
						break;
					}
					params[i] = paramType;
				}
				DataType type = DataType.INT;
				switch (ctx.type.getText()) {
				case "int":
					break;
				case "string":
					type = DataType.STRING;
					break;
				default:
					break;
				}
				if (definedFunctions.contains(functionName, parameterCount)) {
					throw new FunctionAlreadyDefinedException(ctx.funcName);
				}
				definedFunctions.add(functionName, params, type);
				return null;
			}
		}.visit(tree);
		return definedFunctions;
	}
}
